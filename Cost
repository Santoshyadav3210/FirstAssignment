import React, { useState, SyntheticEvent, useEffect } from "react";
import { useDispatch } from "react-redux";
import { FormState, Resolver, SubmitHandler, useForm } from "react-hook-form";
import { useTranslation } from "react-i18next";

//mui
import { Box, CircularProgress, Grid, Tab, Tabs, styled } from "@mui/material";
import { Cancel, Save } from "@mui/icons-material";

//services

import { showMessage } from "store/ActionMessageSlice";
import { useAppSelector } from "store/reduxHooks";

//components
// import { NomuraBigSizeDialog, TabPanel } from "components/common";
// import { KeyInformation, WorkstreamCostGrid, WorkstreamBenefits, DefendCategorization } from "..";
// import { workstreamResolver } from "../KeyInformation/WorkstreamValidationRules";
// import { NomuraButton } from "components/common/forms";
import { workstreamResolver } from "components/WorkStream/KeyInformation/WorkStreamValidationRules";
import { NomuraBigSizeDialog } from "components/common/NomuraBigSizeDialog/NomuraBigSizeDialog";
import { TabWithErrorMark } from "components/common/Tabs/TabWithErrorMark";
import { TabPanel } from "components/common/TabPanel/TabPanel";
import { KeyInformation } from "components/WorkStream/KeyInformation/KeyInformation";
import { WorkstreamCostGrid } from "components/WorkStream/WorkstreamCostGrid/WorkstreamCostGrid";
import { WorkstreamBenefits } from "components/WorkStream/WorkstreamBenefits/WorkstreamBenefits";
import { DefendCategorization } from "components/WorkStream/DefendCategorization/DefendCategorization";
import { NomuraButton } from "components/common/Form";

//models
// import { RefDataBudAttribMaster, SelectItem, WorkStream } from "models";
import { WorkstreamDetails, WorkstreamEdit, WorkstreamInformation, WorkstreamDataCollection } from "models/workstreams";
import { AttribMasterConstants } from "core/utilities/AttribMasterConstants";
import { Constants } from "core";
import { nameof } from "ts-simple-nameof";
import { SelectItem, WorkStream } from "models";

import { RefDataBudAttribMaster } from "models/RefernceData/RefdataBudAttribMaster";
import { BusinessDivisionService, ProgramService, SubProgramService, WorkStreamService } from "services";
import { JobFunctionMappingService, RegionMappingService } from "services/mappings.service";
import axios from "axios";
// import { TabWithErrorMark } from "components/common/Tabs";

interface ViewWorkstreamDialogProps {
  data: WorkStream;
  show: boolean;
  onCancelClick: () => void;
}

enum ViewWorkstreamType {
  keyInformation = 0,
  cost = 1,
  benefit = 2,
  defendCategorization = 3,
}

enum DataType {
  Workstream = 0,
  Programs = 1,
  SubProgram = 2,
  LeadRegion = 3,
  DeliveryFunction = 4,
  BudAttributeMasterData = 5,
  // Tags = 6,
}

const LookupTypeKeys: string[] = [
  AttribMasterConstants.lookupTypeTypeApprovalStatus,
  AttribMasterConstants.lookupTypeTypeStatus,
  AttribMasterConstants.lookupTypeTypePriority,
  AttribMasterConstants.lookupTypeInvGovernanceRegion,
  AttribMasterConstants.lookupTypeCrossInitiativeFuncs,
  AttribMasterConstants.lookupTypeInvSpendUsers,
  AttribMasterConstants.lookupTypeClassification,
  AttribMasterConstants.lookupTypeSubClassification,
];

const Loading = styled("div")({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  height: 454,
});

export const ViewWorkstreamDialog = (props: ViewWorkstreamDialogProps) => {
  const { t } = useTranslation();
  const { data } = props;
  console.log(props, "ViewWorkstreamDialog");
  const defaultWorkstreamDetails = {} as WorkstreamDetails;
  const dispatch = useDispatch();

  const currentUser = useAppSelector((state) => state.loggedInUser.currentUser);

  const [tabActive, setTabActive] = useState<ViewWorkstreamType>(ViewWorkstreamType.keyInformation);
  const [workstreamDetails, setWorkstreamDetails] = useState<WorkstreamDetails>(defaultWorkstreamDetails);
  const [workstreamEdit, setWorkstreamEdit] = useState<WorkstreamEdit>();
  const [loading, setLoading] = useState<boolean>(false);
  const [saving, setSaving] = useState<boolean>(false);

  // const pmtNonFinRole = currentUser.currentRole.roleId === Constants.PmtPortfolioNonFin;

  const workstreamForm = useForm<any>({
    defaultValues: {},
    resolver: workstreamResolver() as Resolver<WorkstreamEdit>,
    shouldFocusError: true,
    mode: "all",
  });

  const { handleSubmit } = workstreamForm;

  const onViewWorkstreamTabChange = (event: SyntheticEvent, value: ViewWorkstreamType) => {
    setTabActive(value);
  };

  const isUserHavPermissionApprovalStatus = (users: Array<string>, currentLdapId: string): boolean => {
    return users.findIndex((permissionLdapId) => permissionLdapId === currentLdapId) > -1;
  };

  const getKeyInformationDetails = (response: Array<any>): WorkstreamDataCollection => {
    const budAttribs = response[DataType.BudAttributeMasterData];
    const approvalStatusUsersAttribs = filteredAttribsByLookupType(
      budAttribs,
      AttribMasterConstants.lookupTypeInvSpendUsers
    );
    const permUserLdaps: string[] = approvalStatusUsersAttribs
      ? approvalStatusUsersAttribs.map((item) => item.returnValue1)
      : [];
    return {
      programs: response[DataType.Programs],
      subPrograms: response[DataType.SubProgram],
      classifications: filteredAttribsByLookupType(budAttribs, AttribMasterConstants.lookupTypeClassification),
      subClassifications: filteredAttribsByLookupType(budAttribs, AttribMasterConstants.lookupTypeSubClassification),
      leadRegions: response[DataType.LeadRegion],
      deliveryFunctions: response[DataType.DeliveryFunction],
      statuses: getDropdownMappedItems(budAttribs, AttribMasterConstants.lookupTypeTypeStatus),
      isUserHavPermissionApprovalStatus: isUserHavPermissionApprovalStatus(permUserLdaps, currentUser.ldapId),
      approvalStatuses: getDropdownMappedItems(budAttribs, AttribMasterConstants.lookupTypeTypeApprovalStatus),
      priorityTypes: getDropdownMappedItems(budAttribs, AttribMasterConstants.lookupTypeTypePriority),
      invGovernanceRegions: getDropdownMappedItems(budAttribs, AttribMasterConstants.lookupTypeInvGovernanceRegion),
      crossFuncInitiatives: getDropdownMappedItems(budAttribs, AttribMasterConstants.lookupTypeCrossInitiativeFuncs),
    };
  };

  const initData = (response: any) => {
    console.log(response[0], "initData");
    const workstream = response[DataType.Workstream];
    const details = {
      dataCollection: getKeyInformationDetails(response),
      cost: workstream[0]?.cost,
      benefits: workstream[0]?.benefit,
      defendCategorization: workstream[0]?.defendCategorization,
      keyInformation: workstream[0]?.keyInformation,
    };

    const editData = { ...workstream[0].keyInformation, ...workstream[0].defendCategorization };
    setWorkstreamEdit(editData);
    Object.keys(editData).forEach((key: any) => {
      workstreamForm.setValue(key, editData[key], { shouldDirty: false });
    });

    if (workstreamForm.getValues("classification") !== "Defend") {
      workstreamForm.setValue("isHighIARcsa", null);
      workstreamForm.setValue("isMktIndustryRequirement", null);
      workstreamForm.setValue("regulationNameAuditPoint", null);
    }

    workstreamForm.trigger();
    console.log(details.cost, "details");

    setWorkstreamDetails(details);
  };

  useEffect(() => {
    if (data.id) {
      setLoading(true);
      Promise.all([
        WorkStreamService.getWorkStreamDetailsByID(data.id, Constants.previousYearsCount),
        ProgramService.get(),
        SubProgramService.get(),
        RegionMappingService.get(),
        BusinessDivisionService.getAllBusinessDivisionsData(),
        WorkStreamService.getWorkStreamAttributeList(),
      ] as any)
        .then((responses) => {
          const data = responses.map((response: any) => response.data);
          initData(data);
        })
        .catch((error) => {
          console.error(error);
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [data.id]);

  const onSubmit: SubmitHandler<any> = (data) => {
    console.log("onSubmit");
    setSaving(true);
    console.log(data, "onSubmit");
  };

  const onCancelClickHandler = () => {
    workstreamForm.reset(workstreamEdit);
    props.onCancelClick();
  };
  const hasDefendTabErrors = hasDefendValidationErrors(workstreamForm.formState);
  const hasKeyInformationErrors = hasKeyInformationValidationErrors(workstreamForm.formState);

  console.log(workstreamDetails, "workstreamDetails");

  console.log(workstreamForm.formState, "workstreamForm");

  const currentFormState = workstreamForm.getValues();
  console.log(currentFormState,"currentFormState");

  return (
    <NomuraBigSizeDialog
      testId="workstreamEditDialog"
      dialogTitle={data.name}
      actionHide
      maxWidth={"xl"}
      open={props.show}
      onCancel={props.onCancelClick}
    >
      {!loading && (
      <form noValidate onSubmit={handleSubmit(onSubmit)}>
          <Grid container spacing={1}>
            <Grid item md={12}>
              <Box>
                <Tabs
                  indicatorColor="primary"
                  textColor="primary"
                  value={tabActive}
                  onChange={onViewWorkstreamTabChange}
                >
                  <TabWithErrorMark
                    value={ViewWorkstreamType.keyInformation}
                    label={t("keyInformation")}
                    disabled={saving}
                    // hasErrors={hasKeyInformationErrors}
                  />
                  <Tab value={ViewWorkstreamType.cost} label={t("workstreamCost")} disabled={saving} />
                  <Tab value={ViewWorkstreamType.benefit} label={t("workstreamBenefit")} disabled={saving} />
                  <TabWithErrorMark
                    value={ViewWorkstreamType.defendCategorization}
                    label={t("defendCategorization")}
                    disabled={saving}
                    // hasErrors={hasDefendTabErrors}
                  />
                </Tabs>
              </Box>
              <TabPanel value={ViewWorkstreamType.keyInformation} index={tabActive} renderContentInAdvance>
                <KeyInformation form={workstreamForm} data={workstreamDetails.dataCollection} disabled={saving} />
              </TabPanel>
              <TabPanel value={ViewWorkstreamType.cost} index={tabActive}>
                <WorkstreamCostGrid data={workstreamDetails.cost} />
              </TabPanel>
              <TabPanel value={ViewWorkstreamType.benefit} index={tabActive}>
                <WorkstreamBenefits data={workstreamDetails.benefits} />
              </TabPanel>
              <TabPanel value={ViewWorkstreamType.defendCategorization} index={tabActive} renderContentInAdvance>
                <DefendCategorization form={workstreamForm} data={workstreamDetails.dataCollection} disabled={saving} />
              </TabPanel>
            </Grid>
            <Grid
              container
              item
              md={12}
              alignItems="center"
              justifyContent="flex-end"
              spacing={2}
              sx={{ marginTop: "30px !important" }}
            >
              <Grid item>
                <NomuraButton type="submit" loading={saving} startIcon={<Save />} disabled={saving}>
                  {t("save")}
                </NomuraButton>
              </Grid>
              <Grid item>
                <NomuraButton color="secondary" startIcon={<Cancel />} onClick={onCancelClickHandler} disabled={saving}>
                  {t("cancel")}
                </NomuraButton>
              </Grid>
            </Grid>
          </Grid>
        </form>
      )}
      {loading && (
        <Loading>
          <CircularProgress color="primary" />
        </Loading>
      )}
    </NomuraBigSizeDialog>
  );
};
function hasDefendValidationErrors(formState: FormState<WorkstreamEdit>) {
  return (
    !formState.isValid &&
    (formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.isHighIARcsa)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.isMktIndustryRequirement)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.regulationNameAuditPoint)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.isRegulatoryRequirement)))
  );
}

function hasKeyInformationValidationErrors(formState: FormState<WorkstreamEdit>) {
  return (
    !formState.isValid &&
    (formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.name)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.programId)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.subProgramId)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.workStreamManager)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.businessSponsor)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.classification)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.subClassification)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.deliveryRegion)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.deliveryFunction)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.workstreamStatus)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.workstreamApprovalStatus)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.startDate)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.endDate)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.tags)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.description)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.typePriority)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.investmentGovernanceRegion)) ||
      formState.errors.hasOwnProperty(nameof<WorkstreamEdit>((x) => x.crossFunctionalInitiative)))
  );
}

function getDropdownMappedItems(budAttribs: RefDataBudAttribMaster[], lookupType: string) {
  const attribItems = filteredAttribsByLookupType(budAttribs, lookupType);
  let mappedStatusDropdown: SelectItem[] = [];
  if (attribItems) {
    mappedStatusDropdown = attribItems.map((item: RefDataBudAttribMaster) => {
      return { key: item.returnValue1, value: item.returnValue1, text: item.returnValue1 };
    });
  }
  return mappedStatusDropdown;
}
function filteredAttribsByLookupType(budAttribs: RefDataBudAttribMaster[], lookupType: string) {
  return budAttribs.filter((item: RefDataBudAttribMaster) => item.lookUpKey1 === lookupType) ?? [];
}
